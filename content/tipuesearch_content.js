var tipuesearch = {"pages": [{'title': 'About', 'text': '組別:cad_ag2 \n 41123124的github位置: https://github.com/probe2004/cad2023 \n 41123124的ipv6序號:28 \n copperliaSam設定網址: http://[2001:288:6004:17:2023::2a]:28/ \n https://github.com/mdecycu/cmsite \n 外部阜號:8243 \n 內部阜號:9243 \n s1511位置: https://s1511.cycu.org/~cad41123124/cad2023/content/index.html \n', 'tags': '', 'url': 'About.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers \xa0 (整數 int(), 浮點數 float()) \n Strings \xa0 (字串) \n print (Python 內建函式, \xa0 print() \xa0 函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt \xa0 動態頁面超文件). \n practice_html.txt \xa0 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 \xa0 class \xa0 後, 在範例導入時透過 \xa0 instance \xa0 引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator \xa0 相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n Filename: \xa0 .py \xa0 \n \n \n \n Run \xa0 Output \xa0 清除輸出區 清除繪圖區 Reload \n \n \n \n \n \n \n \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n \n \n \n \n \n \n \n \n Filename: \xa0 .py \xa0 \n \n \n \n Run \xa0 Output \xa0 清除輸出區 清除繪圖區 Reload \n \n \n \n \n 座位表程式 \n # Brython code starts from browser import document, html # get output html location brython_div = document["brython_div1"] brython_div <= html.P(id="output_table") # Replace this line with the actual file content file_content = open("https://mde.tw/cadnote/downloads/2a_w12_seat.txt").read() # Create a dictionary to store student numbers and seat numbers seat_map = {} # Process each line of the file content for line in file_content.splitlines(): # Split each line using tabs elements = line.split("\\t") # If the line contains seat information if len(elements) == 2 and "(" in elements[1]: # Extract student number and seat information stud_num = elements[0].strip() seat_info = elements[1].strip() # Add student number and seat information to the dictionary seat_map[stud_num] = seat_info # Find the maximum row and column values max_row = max(int(seat_info[1]) for seat_info in seat_map.values()) max_col = max(int(seat_info[3]) for seat_info in seat_map.values()) # Initialize a 2D list to represent the seating arrangement seating_arrangement = [["空位"] * max_col for _ in range(max_row)] # Populate the seating arrangement with student information for stud_num, seat_info in seat_map.items(): row = int(seat_info[1]) - 1 col = int(seat_info[3]) - 1 seating_arrangement[row][col] = f"座位號: {seat_info}, 學號: {stud_num}" # Display the result in the HTML document result_html = " \n " for row in seating_arrangement: result_html += "" for cell_content in row: result_html += f"" result_html += "" result_html += " \n \n \n \n {cell_content} \n \n \n \n " # Update the HTML content with the result document["output_table"].html = result_html # Brython code ends \n', 'tags': '', 'url': 'Brython.html'}, {'title': 'HW', 'text': '', 'tags': '', 'url': 'HW.html'}, {'title': 'Replit', 'text': '在mde.tw裡面的w4-5中影片提到關於前置作業設定，前置作業做好之後就可以到replit按下RUN，就會跑出自己倉儲的頁面，可以進行編輯。編輯完之後按下covert轉成靜態，接著回去replit找到commit，輸入自己想要的更新標題之後，再按下push，到github確認有更新之後，到setting的pages打開網頁，確認全部都已經更新完成。 \n 考量到replit在2023年底可能會不給使用。一律改為用s1511進行更新。 \n 連動s1511伺服器進行更新之後，即無法利用replit進行更新，個人猜想原因為近端跟遠端不同步。(replit會要求同步，但輸入之後出現問題) \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 's1511', 'text': '1202更新 成功利用ssh進入s1511 \n 進入步驟，要先把w8的前三篇影片看完做前置作業。要先開啟sftp連接到s1511得伺服其中，開啟ssh登入之後，切換到cad2023，輸入python3 server.py按下enter執行，就可以到google輸入s1511.cycu.org:外部阜號，開啟連結網站了。 \n 設定config的email以及username之後進行git pull整合近端跟遠端的資料一致，再push上去到github確認更新成功。建立public_html資料夾在cad41123124裡面，接著克隆，可以連結"s1511.cycu.org/~cad41123124"的網頁。 \n 在cad41123124中的cad2023設置好acp的設定之後，就可以在動態網站中進行轉靜態acp的動作，acp成功之後也可以在確認github進行更新。 \n 利用s1511端進行更新測試。(因replit無法commit推送) \n', 'tags': '', 'url': 's1511.html'}, {'title': 'localhost', 'text': '', 'tags': '', 'url': 'localhost.html'}, {'title': '斜坡球', 'text': '關於斜坡的一些操作筆記，導入斜坡範例的stl檔到CoppeliaSim中，右鍵選擇add>proximity sensor>ray type來加入位於斜坡中央的感測器。依照影片的步驟完成設定。 \n \n', 'tags': '', 'url': '斜坡球.html'}, {'title': '操場球', 'text': '利用Inventor繪製個零件，最後組裝。 \n 帶有環形軌道的底座 \n \n 球 \n \n', 'tags': '', 'url': '操場球.html'}, {'title': 'Replit前置作業', 'text': 'mkdir cad2023 \n cd cad2023 \n git init \n 利用 SciTE 建立 README.md 檔案, 放入後續在 Replit 會需要的 git submodule update 以及 pip install 指令 \n git add README.md \n git commit -m \xa0 "add README.md" \n 利用下列指令將 cmsimde 倉儲設定為本倉儲的子模組且放入 cmsimde 目錄中 \n git submodule add https: //github.com/mdecycu/cmsimde.git cmsimde \n 將 cmsimde 目錄中的 up_dir 內容複製到倉儲根目錄 \n 納入所有變更的內容 \n git add . \n git commit -m \xa0 "add cmsimde as submodule" \n 建立 main 分支, 且設為主分支 \n git branch -M main \n 設定 putty session 名稱為 github.com, 且能以 SSH 連線至 github.com 主機 \n git remote add origin git@github.com:scrum-1/cad2023.git \n git push -u origin main \n \n 過程中若出現 git 從 github.com 連線時產生 Error, 則可能是因為 Windows SChannel API 取用沒有設定對應 key 資料, 此時可以設法使用 OpenSSL 進行連線 handshake, 而不使用 SChannel API 進行認證. \n \n', 'tags': '', 'url': 'Replit前置作業.html'}, {'title': '維護 cad2023 倉儲與網站', 'text': 'Replit + Github(目前使用)\n 可攜環境 + Github \n 自架伺服器 + Github \n \n', 'tags': '', 'url': '維護 cad2023 倉儲與網站.html'}, {'title': '利用s1511進入', 'text': '1)\xa0 如何遠端登入 、2 ) \xa0 如何取放檔案 、3) \xa0 如何與 github 帳號彼此信任 、4) \xa0 如何取下 cad2023 、5) \xa0 如何啟動或關閉 cad2023 倉儲 、6) \xa0 如何連結到動態網站 、7) \xa0 如何設定靜態網站 、8) \xa0 如何連動動態網站改版與靜態網頁 、9) \xa0 如何對資料進行保全 以及 10) \xa0 網路連線協定 等相關議題 \n \n 密碼:syhh \n 外部阜號:9243 \n 內部阜號:8243 \n ps:我不小心把群組的阜號跟我自己的用相反了，可是我不會改回來，燒腦到哭出來。 \n \n', 'tags': '', 'url': '利用s1511進入.html'}, {'title': '任務一', 'text': '', 'tags': '', 'url': '任務一.html'}, {'title': '繪圖過程', 'text': '利用Inventor繪製個零件，最後組裝。 \n 各零件尺寸展示 \n 底座 \n \n 接球的圓盤 \xa0圓盤連接底座的腳架 \xa0圓球本球 \xa0軌道 \n', 'tags': '', 'url': '繪圖過程.html'}, {'title': '模擬結果', 'text': 'https://drive.google.com/drive/folders/1zKrGys9ZxbIclOJIXhJ7sJ8R809T6ghI?usp=drive_link \n', 'tags': '', 'url': '模擬結果.html'}, {'title': '課程結論', 'text': '', 'tags': '', 'url': '課程結論.html'}, {'title': '每週進度追蹤', 'text': '內為影片操作內容簡述。 \n 影片1 \xa0ipv4跟6的說明，從設定裡面去更改網路內容的ipv6，並且更改校內proxy才可以使用。 \n 影片2 \xa0\xa0下載CoopeliaSim並安裝，打開後先設定modules裡面的"visualization strearn"開啟(打勾)，接著找自己網路的ip位置進行更改，改後就可以透過網址加上阜號連結到CoopeliaSim看到正在繪圖的過程。先將自行繪製的零件轉成stl檔方可匯入，匯入後將各零件拆解(右鍵divide)，再給這些零件碰撞體積測試。 \n 影片3 \xa0\xa0從頭建立倉儲需要開啟命令提示字元，安裝git之後版本檢查，輸入老師的指令建立cad2023的資料夾、建立updir資料夾，把cmsimde需要的檔案丟進去，接著建立主分支，告訴電腦你是誰，再來連線到github。 \n 筆記幾個常用到的指令"cd切換資料夾"，"cd ..上一頁"，"exit退出"，"mkdir建立資料夾"，"ls -l列出資料"，"ls -la詳細列出"，"add加入"，"git push推送資料"，"git pull合併資料"。 \n 影片3-2 \xa0\xa0透過putty裡的ssh-key進行gituhb綁定，設定IP以及session之後進行連線測試，與github成功連線之後就可以在github建立pages，這個網頁可以透過命令提示字元中的cmsimde進行開啟維護更新。 \n 影片4 \xa0說明如果原始倉儲被刪除或是隱藏要怎麼回推自己的版本，先fork出倉儲就可以在線上更改，改完按下pull requests送回給管理者審核。 \n 影片5 \n', 'tags': '', 'url': '每週進度追蹤.html'}, {'title': '小組安排', 'text': '', 'tags': '', 'url': '小組安排.html'}, {'title': '小組作業進度', 'text': '更新小組的名單及作業分配位置，通知組員完成該完成的作業。 \n 關於如何建立網站或是推送、零件繪製等皆放置在小組的網站。 \n https://cad2023ag2.joe012299.repl.co/ \n \n \n', 'tags': '', 'url': '小組作業進度.html'}]};